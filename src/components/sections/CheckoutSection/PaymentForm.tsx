"use client";
import React from "react";
import { FormData } from "./types";
import { useWcPaymentGatewaysQuery } from "@/components/hooks/useWpQueries";
import s from "./CheckoutSection.module.css";

interface PaymentFormProps {
  formData: FormData;
  setFormData: (data: FormData) => void;
}

export default function PaymentForm({
  formData,
  setFormData,
}: PaymentFormProps) {
  const { data: paymentGateways = [], isLoading } = useWcPaymentGatewaysQuery();

  // –ú–∞–ø—ñ–Ω–≥ –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const paymentMethodMap: Record<string, string> = {
    cod: "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂",
    wayforpay: "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ WayForPay",
    bacs: "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
  };

  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–ª–∞—Ç—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
  // –¢–∏–ø –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ —à–ª—é–∑—É –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
  type Gateway = { id: string; title: string; enabled: boolean };

  const activePaymentGateways = (paymentGateways as Gateway[]).filter(
    (gateway) => gateway.enabled
  );

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞–Ω–∏—Ö
  React.useEffect(() => {
    if (paymentGateways && paymentGateways.length > 0) {
      console.log("[PaymentForm] üí≥ –ü–ª–∞—Ç—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏:", {
        total: paymentGateways.length,
        active: activePaymentGateways.length,
        gateways: activePaymentGateways.map((g) => ({
          id: g.id,
          title: g.title,
          enabled: g.enabled,
        })),
      });
    }
  }, [paymentGateways, activePaymentGateways]);

  return (
    <div className={s.paymentBlock}>
      <h2 className={s.sectionTitle}>–û–ø–ª–∞—Ç–∞</h2>
      {isLoading ? (
        <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤...</div>
      ) : (
        <div className={s.radioRow}>
          {activePaymentGateways.map((gateway) => {
            const displayName = paymentMethodMap[gateway.id] || gateway.title;
            return (
              <div key={gateway.id} className={s.radioBlock}>
                <label className={s.radio}>
                  <input
                    className={s.radioInput}
                    type="radio"
                    name="pay"
                    value={displayName}
                    checked={formData.paymentMethod === displayName}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        paymentMethod: e.target.value,
                      })
                    }
                  />{" "}
                  {displayName}
                </label>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}

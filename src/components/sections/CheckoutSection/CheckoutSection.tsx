"use client";
import React, { useState } from "react";
import { useCartStore, selectCartTotal } from "@/store/cart";
import { useCreateWcOrder } from "@/lib/useMutation";
import { useWcPaymentGatewaysQuery } from "@/components/hooks/useWpQueries";
import MapPickerModal from "@/components/sections/CheckoutSection/MapPickerModal/MapPickerModal";
import CheckoutHeader from "@/components/layout/CheckoutHeader/CheckoutHeader";
import CheckoutFooter from "@/components/layout/CheckoutFooter/CheckoutFooter";
import PersonalDataForm from "./PersonalDataForm";
import DeliveryForm from "./DeliveryForm";
import PaymentForm from "./PaymentForm";
import CommentForm from "./CommentForm";
import OrderSummary from "./OrderSummary";
import s from "./CheckoutSection.module.css";

export default function CheckoutSection() {
  const total = useCartStore(selectCartTotal);
  const safeTotal = total || 0;
  const itemsMap = useCartStore((st) => st.items);
  const items = Object.values(itemsMap);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—à–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ–±–∞–≥—É)
  // React.useEffect(() => {
  //   console.log("[CheckoutSection] üõí –°—Ç–∞–Ω –∫–æ—à–∏–∫–∞:", {
  //     total,
  //     safeTotal,
  //     itemsCount: items.length,
  //     itemsMap,
  //     items: items.map((item) => ({
  //       id: item.id,
  //       name: item.name,
  //       quantity: item.quantity,
  //       price: item.price,
  //     })),
  //   });
  // }, [total, items, itemsMap]);

  const createOrderMutation = useCreateWcOrder();
  const { data: paymentGateways = [] } = useWcPaymentGatewaysQuery();

  const [hasDifferentRecipient, setHasDifferentRecipient] = useState(false);
  const [deliveryType, setDeliveryType] = useState("");
  const [isMapOpen, setIsMapOpen] = useState(false);
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    email: "",
    recipientFirstName: "",
    recipientLastName: "",
    recipientPhone: "",
    city: "",
    branch: "",
    house: "",
    building: "",
    apartment: "",
    paymentMethod: "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂",
    comment: "",
  });

  const handleSubmit = async () => {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω—É email –∞–¥—Ä–µ—Å—É");
        return;
      }

      // console.log("[CheckoutSection] üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", {
      //   formData,
      //   hasDifferentRecipient,
      //   deliveryType,
      //   itemsCount: items.length,
      // });

      // –ú–∞–ø—ñ–Ω–≥ –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
      const paymentMethodMap: Record<string, string> = {
        "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂": "cod",
        "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ WayForPay": "wayforpay",
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ": "cod",
      };

      const paymentMethod = paymentMethodMap[formData.paymentMethod] || "cod";
      const paymentMethodTitle = formData.paymentMethod;

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è WooCommerce
      const orderData = {
        payment_method: paymentMethod,
        payment_method_title: paymentMethodTitle,
        set_paid: false,
        billing: {
          first_name: formData.firstName,
          last_name: formData.lastName,
          email: formData.email,
          phone: formData.phone,
          address_1: formData.branch || formData.house,
          city: formData.city,
          country: "UA",
        },
        shipping: {
          first_name: hasDifferentRecipient
            ? formData.recipientFirstName
            : formData.firstName,
          last_name: hasDifferentRecipient
            ? formData.recipientLastName
            : formData.lastName,
          address_1: formData.branch || formData.house,
          city: formData.city,
          country: "UA",
        },
        line_items: items.map((item) => ({
          product_id: parseInt(item.id),
          quantity: item.quantity,
        })),
        shipping_lines:
          deliveryType === "nova_poshta"
            ? [
                {
                  method_id: "nova_poshta",
                  method_title: "–ù–æ–≤–∞ –ü–æ—à—Ç–∞",
                  total: "0.00",
                },
              ]
            : undefined,
        customer_note: formData.comment,
      };

      // console.log("[CheckoutSection] üì¶ –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", orderData);
      // console.log("[CheckoutSection] üì¶ Line items –¥–µ—Ç–∞–ª—å–Ω–æ:", {
      //   lineItems: orderData.line_items,
      //   itemsFromCart: items.map((item) => ({
      //     id: item.id,
      //     name: item.name,
      //     quantity: item.quantity,
      //     price: item.price,
      //   })),
      // });

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const result = (await createOrderMutation.mutateAsync(orderData)) as {
        id: number | string;
        status?: string;
      };

      // console.log("[CheckoutSection] ‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ:", result);

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É—Å–ø—ñ—Ö—É
      localStorage.setItem(
        "orderData",
        JSON.stringify({
          formData,
          hasDifferentRecipient,
          deliveryType,
          orderId: result.id,
          orderStatus: result.status,
        })
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É
      window.location.href = "/order-success";
    } catch (error) {
      console.error(
        "[CheckoutSection] ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        error
      );
      alert("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  };

  return (
    <>
      <CheckoutHeader />
      <div className={s.page}>
        <div className={s.container}>
          <div className={s.left}>
            <PersonalDataForm
              formData={formData}
              hasDifferentRecipient={hasDifferentRecipient}
              setFormData={setFormData}
              setHasDifferentRecipient={setHasDifferentRecipient}
            />

            <DeliveryForm
              deliveryType={deliveryType}
              formData={formData}
              setDeliveryType={setDeliveryType}
              setFormData={setFormData}
              setIsMapOpen={setIsMapOpen}
            />

            <PaymentForm formData={formData} setFormData={setFormData} />

            <CommentForm formData={formData} setFormData={setFormData} />

            <div className={s.buttonBlock}>
              <button
                className={s.primaryWide}
                onClick={handleSubmit}
                disabled={createOrderMutation.isPending}
              >
                {createOrderMutation.isPending
                  ? "–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è..."
                  : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}
              </button>
              <div className={s.checkboxBlock}>
                <label className={s.checkbox}>
                  <input type="checkbox" />
                  <span className={s.checkboxText}>
                    –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ e-mail —Ä–æ–∑—Å–∏–ª–∫—É
                  </span>
                </label>
              </div>
              <div className={s.checkboxBlock}>
                <label className={s.checkbox}>
                  <input type="checkbox" />
                  <span className={s.checkboxText}>
                    –ü—Ä–∏–π–º–∞—é —É–º–æ–≤–∏ –æ—Ñ–µ—Ä—Ç–∏, –ø–æ–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–∞—è–≤–∏ –ø—Ä–æ
                    –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                  </span>
                </label>
              </div>
            </div>
          </div>

          <div className={s.right}>
            <OrderSummary total={safeTotal} />
          </div>
        </div>
      </div>
      <CheckoutFooter />
      <MapPickerModal
        isOpen={isMapOpen}
        onClose={() => setIsMapOpen(false)}
        onSelectLocation={(location) => {
          setFormData((prev) => ({ ...prev, branch: location }));
          setIsMapOpen(false);
        }}
        selectedCity={formData.city}
      />
    </>
  );
}

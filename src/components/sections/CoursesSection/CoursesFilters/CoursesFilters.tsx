"use client";
import React, { useEffect, useMemo, useState } from "react";
import styles from "./CoursesFilters.module.css";
import { WorkoutTypeFilter } from "../filters/WorkoutTypeFilter/WorkoutTypeFilter";
import { TrainingTypeFilter } from "../filters/TrainingTypeFilter/TrainingTypeFilter";
import ButtonFilter from "@/components/ui/ButtonFilter/ButtonFilter";
import { CertificationFilter } from "../filters/TrainerSelectionFilter/TrainerSelectionFilter";
import { fetchCourseCategories, WooCommerceCategory } from "@/lib/bfbApi";

interface FilterState {
  priceMin: number;
  priceMax: number;
  colors: string[];
  sizes: string[];
  certification: string[];
  workoutTypes?: string[];
}

interface Product {
  id: string;
  name: string;
  price: string;
  regularPrice: string;
  salePrice: string;
  onSale: boolean;
  image: string;
  categories: Array<{
    id: number;
    name: string;
    slug: string;
  }>;
  stockStatus: string;
}

interface CoursesFiltersProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  onReset: () => void;
  products: Product[];
  searchTerm: string;
  onApplyCategories?: (categoryIds: number[]) => void;
}

const CoursesFilters = ({
  filters,
  onFiltersChange,
  onReset,
  onApplyCategories,
}: CoursesFiltersProps) => {
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<WooCommerceCategory[]>([]);
  const [childrenByGroup, setChildrenByGroup] = useState<
    Record<number, WooCommerceCategory[]>
  >({});
  // –û–∫—Ä–µ–º–æ: –¥—ñ—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Üí –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (id=61)
  const [trainingPickTypeChildren, setTrainingPickTypeChildren] = useState<
    WooCommerceCategory[]
  >([]);
  // –û–∫—Ä–µ–º–æ: –¥—ñ—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Üí –¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (id=56)
  const [trainingTypeChildren, setTrainingTypeChildren] = useState<
    WooCommerceCategory[]
  >([]);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        console.log(
          "[CoursesFilters] üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—É—Ä—Å—ñ–≤ (parent=72)..."
        );
        const cats = await fetchCourseCategories();
        console.log("[CoursesFilters] ‚úÖ –ì—Ä—É–ø (parent=72):", cats.length);
        setCategories(cats);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
        const allChildrenEntries = await Promise.all(
          cats.map(async (g) => {
            const res = await fetch(
              `/api/wc/products/categories?parent=${g.id}&per_page=100`,
              { cache: "no-store" }
            );
            if (!res.ok) {
              console.warn(
                "[CoursesFilters] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è",
                g.id,
                g.name,
                res.status
              );
              return [g.id, [] as WooCommerceCategory[]] as const;
            }
            const children = (await res.json()) as WooCommerceCategory[];
            console.log(
              `[CoursesFilters] üëá ${g.name} ‚Üí –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π:`,
              children.length
            );
            return [g.id, children] as const;
          })
        );
        setChildrenByGroup(Object.fromEntries(allChildrenEntries));

        // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—ñ–ª–∫—É –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Üí –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (id=61)
        try {
          const res61 = await fetch(
            `/api/wc/products/categories?parent=61&per_page=100`,
            { cache: "no-store" }
          );
          if (res61.ok) {
            const list61 = (await res61.json()) as WooCommerceCategory[];
            setTrainingPickTypeChildren(list61);
            console.log(
              "[CoursesFilters] ‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è/–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø (61) ‚Üí",
              list61.length
            );
          } else {
            console.warn("[CoursesFilters] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥—ñ—Ç–µ–π 61");
          }
        } catch {
          console.warn("[CoursesFilters] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—ñ—Ç–µ–π 61");
        }

        // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—ñ–ª–∫—É –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Üí –¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (id=56)
        try {
          const res56 = await fetch(
            `/api/wc/products/categories?parent=56&per_page=100`,
            { cache: "no-store" }
          );
          if (res56.ok) {
            const list56 = (await res56.json()) as WooCommerceCategory[];
            setTrainingTypeChildren(list56);
            console.log(
              "[CoursesFilters] ‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è/–¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (56) ‚Üí",
              list56.length
            );
          } else {
            console.warn("[CoursesFilters] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥—ñ—Ç–µ–π 56");
          }
        } catch {
          console.warn("[CoursesFilters] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—ñ—Ç–µ–π 56");
        }
      } catch (e) {
        console.error(
          "[CoursesFilters] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫—É—Ä—Å—ñ–≤",
          e
        );
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // –ü–æ–±—É–¥–æ–≤–∞ –º–∞–ø–∏ name -> id –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ (—è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å –∑—ñ —Å—Ç—Ä–æ–∫–∞–º–∏)
  const nameToIdMap = useMemo(() => {
    const map = new Map<string, number>();
    // –ú–∞–ø–∏–º–æ —Å–∞–º–µ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫ –æ–ø—Ü—ñ—ó
    Object.values(childrenByGroup).forEach((arr) =>
      arr.forEach((c) => map.set(c.name, c.id))
    );
    trainingPickTypeChildren.forEach((c) => map.set(c.name, c.id));
    trainingTypeChildren.forEach((c) => map.set(c.name, c.id));
    return map;
  }, [childrenByGroup, trainingPickTypeChildren, trainingTypeChildren]);

  const handleFilterChange = (
    key: keyof FilterState,
    value: string | string[] | number
  ) => {
    const newFilters = { ...filters, [key]: value };
    onFiltersChange(newFilters);
  };

  const handleApply = () => {
    // –ó–±–∏—Ä–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –Ω–∞–∑–≤–∏ –∑—ñ –≤—Å—ñ—Ö —Ç—Ä—å–æ—Ö –±–ª–æ–∫—ñ–≤ —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ ID
    const selectedNames: string[] = [
      ...(filters.sizes || []),
      ...(filters.certification || []),
      ...((filters.workoutTypes as string[]) || []),
    ];
    const categoryIds = selectedNames
      .map((name) => nameToIdMap.get(name))
      .filter((v): v is number => typeof v === "number");

    console.log("[CoursesFilters] üì¶ –û–±—Ä–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (names):", selectedNames);
    console.log("[CoursesFilters] üî¢ –û–±—Ä–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (ids):", categoryIds);

    onApplyCategories?.(categoryIds);
  };

  // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤: –±–µ–∑ –¥–≤–æ–∫—Ä–∞–ø–æ–∫, –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
  const norm = (s?: string) =>
    (s || "").toLowerCase().trim().replace(/[:]+$/g, "");

  // –ü—ñ–¥–±—ñ—Ä –≥—Ä—É–ø –∑–∞ –Ω–∞–∑–≤–æ—é –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏, –∞–±–æ fallback –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º
  const findGroupId = (titles: string[], fallbackIndex: number) => {
    const normalizedTitles = titles.map(norm);
    const direct = categories.find((g) =>
      normalizedTitles.includes(norm(g.name))
    )?.id;
    return direct ?? categories[fallbackIndex]?.id;
  };

  let groupTypeId = findGroupId(["—Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "—Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:"], 1);
  // removed unused groupPickTypeId/groupFormatId to satisfy lint

  // –Ø–∫—â–æ –Ω–∞–∑–≤–∏ –Ω–µ –∑–±—ñ–≥–ª–∏—Å—å, –ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≥—Ä—É–ø—É –∑–∞ –≤–º—ñ—Å—Ç–æ–º –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  const desiredTrainingTypes = new Set([
    "–∫–∞—Ä–¥—ñ–æ",
    "—Ç–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ",
    "mind body",
    "—Å–∏–ª–æ–≤—ñ",
  ]);
  if (!groupTypeId && Object.keys(childrenByGroup).length > 0) {
    for (const [gidStr, arr] of Object.entries(childrenByGroup)) {
      const hasDesired = arr.some((c) =>
        desiredTrainingTypes.has(norm(c.name))
      );
      if (hasDesired) {
        groupTypeId = Number(gidStr);
        break;
      }
    }
  }

  // –ü–æ—Ä—è–¥–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
  const trainingTypeOrder = new Map<string, number>([
    ["–ö–∞—Ä–¥—ñ–æ", 1],
    ["–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ", 2],
    ["Mind body", 3],
    ["–°–∏–ª–æ–≤—ñ", 4],
  ]);

  // –ü–æ—Ä—è–¥–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
  const pickTypeOrder = new Map<string, number>([
    ["–ó –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é", 1],
    ["–ó –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º", 2],
    ["–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –∑–∞–ª—ñ", 3],
    ["–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–¥–æ–º–∞", 4],
  ]);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
  React.useEffect(() => {
    console.log("[CoursesFilters] üîç Debug data:", {
      trainingPickTypeChildren,
      trainingPickTypeChildrenLength: trainingPickTypeChildren?.length,
      options: (trainingPickTypeChildren || [])
        .slice()
        .sort(
          (a, b) =>
            (pickTypeOrder.get(a.name) ?? 99) -
            (pickTypeOrder.get(b.name) ?? 99)
        )
        .map((c) => c.name),
      filters: filters.workoutTypes,
    });
  }, [trainingPickTypeChildren, filters.workoutTypes]);

  return (
    <div className={styles.filterContainer}>
      <div className={styles.filterSidebar}>
        <TrainingTypeFilter
          value={filters.sizes}
          onChange={(sizes) => handleFilterChange("sizes", sizes)}
          options={(trainingTypeChildren || [])
            .slice()
            .sort(
              (a, b) =>
                (trainingTypeOrder.get(a.name) ?? 99) -
                (trainingTypeOrder.get(b.name) ?? 99)
            )
            .map((c) => ({ key: c.name, label: c.name }))}
        />

        <CertificationFilter
          value={filters.certification}
          onChange={(vals: string[]) =>
            handleFilterChange("certification", vals)
          }
          options={[]}
        />

        <WorkoutTypeFilter
          value={filters.workoutTypes || []}
          onChange={(vals: string[]) => {
            console.log(
              "[CoursesFilters] üèãÔ∏è WorkoutTypeFilter onChange:",
              vals
            );
            handleFilterChange("workoutTypes", vals);
          }}
          options={(trainingPickTypeChildren || [])
            .slice()
            .sort(
              (a, b) =>
                (pickTypeOrder.get(a.name) ?? 99) -
                (pickTypeOrder.get(b.name) ?? 99)
            )
            .map((c) => c.name)}
        />
      </div>

      <ButtonFilter onApply={handleApply} onReset={onReset} loading={loading} />
    </div>
  );
};

export default CoursesFilters;
